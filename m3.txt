"""
Module 3 (A5, A6, and B3) for exam 2024-05-29
"""
class LinkedList:

    class Node:
        def __init__(self, data, succ=None):
            self.data = data
            self.succ = succ

    def __init__(self):
        self.first = None

    def __iter__(self):
        current = self.first
        while current:
            yield current.data
            current = current.succ
    
    def __str__(self):
        return '(' + ', '.join([str(x) for x in self]) + ')'
    

    ### A5 START push at index
    def push(self, data, index:int=0)->None:
        """ Puts a new node with 'data' as the first element in the list"""
        if index == 0:
            self.first = self.Node(data, self.first)
        else:
            pass   # Code for A5
    ### A5 STOP ###

    def pop(self)->any:
        """ Removes the first element in the list and returns its data
        """
        if self.first == None:
            raise ValueError('Empty list in pop')
        result = self.first.data
        self.first = self.first.succ
        return result


class BST:

    class Node:
        def __init__(self, key, left=None, right=None):
            self.key = key
            self.left = left
            self.right = right

        def __str__(self):
            return str(self.key)

        def __iter__(self):
            if self.left:
                yield from self.left
            yield self
            if self.right:
                yield from self.right

    def __init__(self, init=None):
        self.root = None
        if init:
            for x in init:
                self.insert(x)

    def __iter__(self):
        if self.root:
            yield from self.root

    def __str__(self):
        return '<' + ', '.join([str(x) for x in self]) + '>'

    def insert(self, key):
        def insert(key, r):
            if r is None:
                return BST.Node(key)
            elif key < r.key:
                r.left = insert(key, r.left)
            elif key > r.key:
                r.right = insert(key, r.right)
            else:
                pass
            return r

        self.root = insert(key, self.root)
    
    def is_empty(self):
        """Returns True if the tree is empty"""
        return self.root is None

    
    ### A6 START: Write the recursive help-function

    def remove_largest(self): 

        def _remove_largest(node): # A6. Should be recursive
            return None, None # Dummy line. Must be replaced by sevaral lines.

        if self.root:
            self.root, result = _remove_largest(self.root)
        else:
            raise ValueError('Empty tree in remove_largest')
        return result
    
    ### A6 STOP ### Demo function after the classes

    ### B3 START ###
    def max_level_sum(self):
        pass
    ### B3 STOP ###


### Demo functions ###

def A5():
    print(f'\nA5: Demonstrate the push at index in LinkedList')
    lst = LinkedList()
    testset = ((4, 0), (1, 0), (2, 1), (3, 2), (5, 4), (9, 0), 
               (7, 7), (6, -1))
    for item in testset:
        try:
            lst.push(item[0], item[1])
            print(f'Pushed {item[0]} at index {item[1]}.' +
                  f'Result: {lst}')
        except ValueError as ve:
            print(f'*** {ve}')


def A6():
    print('\nA6: Demonstrate the remove_largest in BST')
    inserts = (5, 1, 8, 2, 12, 3, 4, 6)
    print(f'Inserted values: {inserts}')
    bst = BST(inserts)
    print('Removed values:', end=' ')
    while not bst.is_empty():
        print(bst.remove_largest(), end =' ')
    print(f'\nResulting tree: {bst}')
    try:
        bst.remove_largest()
    except ValueError as ve:
        print(f'*** {ve}')

def B3():
    print(f'\nB3: Demonstrate the max_level_sum in BST')
    tree = BST((4, 1))
    print(f'Expects 4, got {tree.max_level_sum()}')
    tree = BST((4, 7))
    print(f'Expects 7, got {tree.max_level_sum()}')
    tree = BST((4, 7, 9))
    print(f'Expects 9, got {tree.max_level_sum()}')
    tree = BST((4, 7, 9, 3))
    print(f'Expects 10, got {tree.max_level_sum()}')
    inserts = (5, 8, 1, 3, 7, 2, 6, 9)
    print(f'\nInserted keys: {inserts}')
    tree = BST(inserts)
    print('Maximal level sum:', tree.max_level_sum())
    tree.insert(12)
    print('Maximal level sum:', tree.max_level_sum(), 
          'after inserting 12')
    try: 
        print('Empty tree', BST().max_level_sum())
    except ValueError as ve:
        print(f'*** {ve}')
### Demo functions stop ###




if __name__ == '__main__':
    A5()
    A6()
    B3()
